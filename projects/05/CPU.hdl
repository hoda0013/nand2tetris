// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[15], b=true, out=and1out);
    Not(in=and1out, out=not1out);
    Or(a=not1out, b=and7out, out=orout);
    And(a=true, b=instruction[12], out=and2out);
    And(a=and2out, b=and1out, out=and9out);
    And(a=true, b=instruction[4], out=and3out);
    And(a=and3out, b=and1out, out=and8out);
    And(a=true, b=instruction[5], out=and4out);
    And(a=and4out, b=and1out, out=and7out);
    And(a=instruction[3], b=true, out=and5out);
    And(a=and1out, b=and5out, out=writeM);
    Mux16(a=aluOut, b=instruction, sel=not1out, out=mux1out);
    ARegister(in=mux1out, load=orout, out=regaout, out[0..14]=addressM);
    Mux16(a=regaout, b=inM, sel=and9out, out=mux2out);
    DRegister(in=aluOut, load=and8out, out=regDout);
    ALU(x=regDout, y=mux2out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=aluzr, ng=alung);
    Nor(a=aluzr, b=alung, out=norout);
    And(a=norout, b=instruction[0], out=and10out);
    And(a=aluzr, b=instruction[1], out=and11out);
    And(a=alung, b=instruction[2], out=and12out);
    Or(a=and10out, b=and11out, out=or2out);
    Or(a=and12out, b=or2out, out=or3out);
    And(a=or3out, b=and1out, out=and6out);
    Not(in=and6out, out=not2out);
    PC(in=regaout, inc=not2out, load=and6out, reset=reset, out[0..14]=pc);
}
