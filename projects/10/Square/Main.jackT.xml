<tokens>
<identifier> class </identifier>
<identifier> Main </identifier>
<symbol> { </symbol>
<identifier> static </identifier>
<identifier> boolean </identifier>
<identifier> test </identifier>
<symbol> ; </symbol>
<identifier> function </identifier>
<identifier> void </identifier>
<identifier> main </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> var </identifier>
<identifier> SquareGame </identifier>
<identifier> game </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> game </identifier>
<symbol> = </symbol>
<identifier> SquareGame </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> game </identifier>
<symbol> . </symbol>
<identifier> run </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> game </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> function </identifier>
<identifier> void </identifier>
<identifier> test </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> var </identifier>
<identifier> int </identifier>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> j </identifier>
<symbol> ; </symbol>
<identifier> var </identifier>
<identifier> String </identifier>
<identifier> s </identifier>
<symbol> ; </symbol>
<identifier> var </identifier>
<identifier> Array </identifier>
<identifier> a </identifier>
<symbol> ; </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> false </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> s </identifier>
<symbol> = </symbol>
<string> string constant </string>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> s </identifier>
<symbol> = </symbol>
<identifier> null </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> a </identifier>
<symbol> [ </symbol>
<integer> 1 </integer>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> [ </symbol>
<integer> 2 </integer>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> * </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<identifier> j </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> / </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<integer> 2 </integer>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> | </symbol>
<identifier> j </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>